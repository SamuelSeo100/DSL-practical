bfs and dfs

bfs
vector<int> bfs0fGraph(int V, vector<int> adj[]) {

int vis[n] = {0};

vis[0] = 1;

queue<int> q;

q.push(0);

vector<int> bfs;

while(!q.empty()) {

int node = q.front();

q.pop();

bfs.push(node);

for(auto it: adj[node]) 
{ if(!vis[it]) {

vis[it] = 1;

q.push(it);

}

}

}

return bfs;

}

};


dfs

class Solution {

private:

void dfs(int node, vector<int> adj[], int vis[], vector<int> &ls) {

vis[node] = 1;

ls.push_back(node);

// traverse all its neighbours

for(auto it: adj[node]) {

if(!vis[it]) {

dfs(it, adj, vis, ls);

}

}

public:

// Function to return a list containing the DFS traversal of the grap vector<int> dfs0fGraph(int V, vector<int> adj[]) {

}

// Code here 
int vis[ = {0};

int start = 0;

vector<int> ls;

dfs(start, adj, vis, ls);

return ls;

};


driver
#include <iostream> using namespace std;

int main() {

int n, m;

cin >> n >> m;

vector<int> adj[n+1];

for(int i = 0;i<m;i++) {

int u, V;

cin >> u >> v;

adj[u].push_back(v);

adj[v].push_back(u);

}

return 0;
